"use strict";(self.webpackChunkfigment_documentation=self.webpackChunkfigment_documentation||[]).push([[7438],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1441:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={title:"Submit Claim Transaction Data"},o=void 0,l={unversionedId:"guides/staking-api/Polygon/undelegate/submit-claim-transaction-data",id:"guides/staking-api/Polygon/undelegate/submit-claim-transaction-data",title:"Submit Claim Transaction Data",description:"After collecting the required inputs, we PUT /api/v1/flows/[:flow_id]/next to move on to the next step.",source:"@site/docs/guides/staking-api/Polygon/undelegate/6_submit-claim-transaction-data.mdx",sourceDirName:"guides/staking-api/Polygon/undelegate",slug:"/guides/staking-api/Polygon/undelegate/submit-claim-transaction-data",permalink:"/guides/staking-api/Polygon/undelegate/submit-claim-transaction-data",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Submit Claim Transaction Data"},sidebar:"docsSidebar",previous:{title:"Unbonding Period",permalink:"/guides/staking-api/Polygon/undelegate/unbonding-period"},next:{title:"Sign the Claim Transaction",permalink:"/guides/staking-api/Polygon/undelegate/sign-claim-transaction"}},s={},c=[],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"After collecting the required inputs, we ",(0,i.kt)("inlineCode",{parentName:"p"},"PUT /api/v1/flows/[:flow_id]/next")," to move on to the next step.\nIn this case, the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," JSON would be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "gas_limit": "[:gas_limit]",\n  "gas_price": "[:gas_price]"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Example cURL request"',title:'"Example',cURL:!0,'request"':!0},'curl --request PUT \\\n  --url https://polygon-slate.datahub.figment.io/api/v1/flows/[:flow_id]/next \\\n  --header \'Authorization: API_KEY\' \\\n  --header \'Content-Type: application/json\' \\\n  --data \'{\n  "name": "create_claim_tx",\n  "inputs": {\n    "gas_limit": "[:gas_limit]",\n    "gas_price": "[:gas_price]"\n  }\n}\'\n')),(0,i.kt)("p",null,"We see two possible ",(0,i.kt)("inlineCode",{parentName:"p"},"actions"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refresh_claim_tx")," \u2014 If you need to get a fresh version of the transaction payload (for example, if the nonce needs to be updated)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sign_claim_tx")," \u2014 Submit a signed transaction payload ready to be broadcast to the network")),(0,i.kt)("p",null,"We will choose ",(0,i.kt)("inlineCode",{parentName:"p"},"sign_claim_tx"),", which indicates one input to collect:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transaction_payload")," (",(0,i.kt)("strong",{parentName:"li"},"required"),") \u2014 the signed transaction payload ready to be broadcast to the network")))}u.isMDXComponent=!0}}]);