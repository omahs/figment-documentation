"use strict";(self.webpackChunkfigment_documentation=self.webpackChunkfigment_documentation||[]).push([[994],{2750:(e,t,a)=>{a.d(t,{ZP:()=>d});var n=a(7462),r=(a(7294),a(3905)),o=a(5488),i=a(5162),s=a(5413);const l={toc:[{value:"Authentication &amp; Making Calls",id:"authentication--making-calls",level:3}]};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"authentication--making-calls"},"Authentication & Making Calls"),(0,r.kt)("p",null,"Making API calls with DataHub requires authentication, which can be performed by passing your API key via the request header ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," or as a parameter in the query URL."),(0,r.kt)("p",null,"Here's some boilerplate to get you started."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js-header",label:"Fetch with Header",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"js",mdxType:"CodeBlock"},'fetch("'+a.url.replace(/(apikey\/[^\/]+\/){1}/,"")+'", {\n    method: \'POST\', // can also be \'GET\', \'PUT\' or any appropriate method\n    headers: {\n        "Authorization" : "<api_key>",\n        "Content-Type": "application/json" // if method is \'POST\'\n    },\n    body: JSON.stringify({\n      // JSON Payload\n    })\n})')),(0,r.kt)(i.Z,{value:"js-parameter",label:"Fetch with Parameter",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"js",mdxType:"CodeBlock"},'fetch("'+a.url.replace(/(apikey\/[^\/]+\/){1}/,"apikey/<api_key>/")+"\", {\n    method: 'POST', // can also be 'GET', 'PUT' or any appropriate method\n    headers: {\n        \"Content-Type\": \"application/json\" // if method is 'POST'\n    },\n    body: JSON.stringify({\n      // JSON Payload\n    })\n})")),(0,r.kt)(i.Z,{value:"curl-header",label:"CURL with Header",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"curl",mdxType:"CodeBlock"},"curl -X POST '"+a.url.replace(/(apikey\/[^\/]+\/){1}/,"")+"' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: <api_key>' \\\n--data '{\n  // JSON Payload\n}'")),(0,r.kt)(i.Z,{value:"curl-parameter",label:"CURL with Parameter",mdxType:"TabItem"},(0,r.kt)(s.Z,{language:"curl",mdxType:"CodeBlock"},"curl -X POST '"+a.url.replace(/(apikey\/[^\/]+\/){1}/,"apikey/<api_key>/")+"' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  // JSON Payload\n}'"))))}d.isMDXComponent=!0},3976:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6775);function o(e){let{network:t,networks:a,methods:o,service:i}=e;const s=(0,r.TH)(),l=(0,r.k6)();return n.createElement("div",null,n.createElement("label",null,"Change Network: "),n.createElement("select",{className:"custom-select",defaultValue:t,onChange:e=>{l.push(s.pathname.replace(/\/[^\/]+$/,"/"+e.target.value))}},a.map((e=>n.createElement("option",{key:e.value+"--n-option",value:e.value},e.label)))),n.createElement("label",null," Jump to: "),n.createElement("select",{className:"custom-select",defaultValue:s.hash.replace("#","")||"",onChange:e=>{l.push("#"+e.target.value)}},o.map((e=>n.createElement("option",{key:e.name+"--m-hash",value:e.name.toLowerCase()},e.name)))))}},5258:(e,t,a)=>{a.d(t,{S:()=>A});var n=a(7462),r=a(7294),o=a(7748),i=a(460),s=a.n(i),l=a(3746),d=a(6412);const c={Header:"Header_JfB9",blinker:"blinker_fwXa",Actions:"Actions_tjtQ",Container:"Container_SXTI",Editor:"Editor_gTle",Line:"Line_F8ZC",Code:"Code_xj0a"};function u(e){let{children:t="",header:a,actions:o,disabled:i=!1,status:u,onValueChange:p}=e;const h=(0,d.p)(),y=(0,r.useRef)(null);(0,r.useEffect)((()=>{var e;const t=null==(e=y.current)?void 0:e.querySelector("textarea"),a=e=>{const t=e.target;t.style.width=t.scrollWidth+"px"};return t.addEventListener("input",a),()=>t.removeEventListener("input",a)}),[]);return r.createElement("div",{ref:y},r.createElement(m,{actions:o,status:u},a),r.createElement("div",{className:c.Container},r.createElement(s(),{value:t,onValueChange:p,highlight:function(e){return void 0===e&&(e=""),r.createElement(l.ZP,(0,n.Z)({},l.lG,{theme:h,code:e,language:"json"}),(e=>{let{className:t,style:a,tokens:o,getLineProps:i,getTokenProps:s}=e;return r.createElement("div",{className:c.Code},o.map(((e,t)=>r.createElement("div",(0,n.Z)({key:t},i({line:e,key:t}),{className:c.Line}),r.createElement("span",{className:c.LineContent},e.map(((e,t)=>r.createElement("span",(0,n.Z)({key:t},s({token:e,key:t}))))))))))}))},disabled:i,ignoreTabKey:!0,padding:10,style:{...h.plain,overflow:"auto"},className:c.Editor})))}function m(e){let{children:t,actions:a=[],status:n}=e;return r.createElement("div",{className:c.Header,"data-status":n},r.createElement("span",null,t),r.createElement("span",{className:c.Actions},a.map(((e,t)=>{let{title:a,onClick:n,Component:o=a}=e;return r.createElement("button",{className:c.HeaderButton,key:t+":"+a,title:a,onClick:n},o)}))))}var p=a(195);const h=function(e,t){const a=(0,r.useRef)(!1),n={error:void 0,data:void 0,loading:!1},[o,i]=(0,r.useReducer)(((e,t)=>{switch(t.type){case"loading":return{...n,loading:!0};case"fetched":return{...n,data:t.payload,loading:!1};case"error":return{...n,error:t.payload,loading:!1};default:return e}}),n);return{...o,fetchData:async function(n,r){void 0===r&&(r={}),i({type:"loading"});try{const o=await fetch(e+(n||""),{...t,...r});if(!o.ok){let e,t,a;try{a=JSON.parse(await o.text()),e=await o.json(),t=JSON.stringify(e,null,2)}catch{}throw new Error(JSON.stringify(t,null,2)||JSON.stringify(a,null,2)||o.statusText)}const s=await o.json();if(a.current)return;return i({type:"fetched",payload:s}),s}catch(o){if(a.current)return;return i({type:"error",payload:o.message}),null}}}};var y,b=a(5413);function f(){return f=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},f.apply(this,arguments)}const g=e=>{let{title:t,titleId:a,...n}=e;return r.createElement("svg",f({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":a},n),t?r.createElement("title",{id:a},t):null,y||(y=r.createElement("path",{d:"M15.526 2H4.79C3.805 2 3 2.818 3 3.818v12.728h1.79V3.818h10.736V2Zm2.684 3.636H8.368c-.984 0-1.79.819-1.79 1.819v12.727c0 1 .806 1.818 1.79 1.818h9.842c.985 0 1.79-.818 1.79-1.818V7.455c0-1-.805-1.819-1.79-1.819Zm0 14.546H8.368V7.455h9.842v12.727Z",fill:"#0C3F5C"})))};var w;function v(){return v=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},v.apply(this,arguments)}const k=e=>{let{title:t,titleId:a,...n}=e;return r.createElement("svg",v({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":a},n),t?r.createElement("title",{id:a},t):null,w||(w=r.createElement("path",{d:"m10 16.5 6-4.5-6-4.5v9ZM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2Zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8Z",fill:"#0C3F5C"})))};var E;function T(){return T=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},T.apply(this,arguments)}const x=e=>{let{title:t,titleId:a,...n}=e;return r.createElement("svg",T({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":a},n),t?r.createElement("title",{id:a},t):null,E||(E=r.createElement("path",{d:"M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35Z",fill:"#0C3F5C"})))};function C(e){let{req:t,res:a,interactive:n}=e;const[o,i]=(0,r.useState)(O(t.body)),[s,l]=(0,r.useState)(t.query),[d,c]=(0,r.useState)(_(a.body)),m="string"==typeof t.body&&0==t.body.indexOf("query"),{data:y,error:f,loading:w,fetchData:v}=h(t.url,{method:t.method,headers:{"Content-Type":m?"application/graphql":"application/json"},body:O(t.body)}),[E,T]=(0,r.useState)(null);(0,r.useEffect)((()=>{w?T("LOADING"):f||null!=y&&y.error?T("ERROR"):y&&T("SUCCESS")}),[y,f,w]);const C=[n?{title:"Run request",onClick:async()=>{const e=await v(s,{body:o});e&&c(_(e))},Component:r.createElement(r.Fragment,null,r.createElement(k,null)," Run")}:null,{title:"Copy",onClick:()=>(0,p.Z)(o),Component:r.createElement(g,null)},n?{title:"Reset",onClick:()=>{T(null),l(t.query),i(O(t.body)),c(_(a.body))},Component:r.createElement(x,null)}:null].filter((e=>!!e));return r.createElement(r.Fragment,null,r.createElement(u,{header:"GET"===t.method?"Request Query "+(n?"(try it)":""):"Request Body "+(n?"(try it)":""),actions:C,disabled:!n,onValueChange:e=>{n&&("GET"===t.method?l(e):"POST"===t.method&&i(e))}},"GET"===t.method?s:o),r.createElement(b.Z,{title:E?"Response":"Example Response",language:"json"},f?""+f:d))}function _(e){return JSON.stringify(e,null,2)}function O(e){return"string"==typeof e?e:JSON.stringify(e,null,2)}var S=a(1099),P=a(3905);const R={toc:[]};function Z(e){let{components:t,...a}=e;return(0,P.kt)("wrapper",(0,n.Z)({},R,a,{components:t,mdxType:"MDXLayout"}),(0,P.kt)("details",null,(0,P.kt)("summary",null,a.title),(0,P.kt)(S.D,{mdxType:"ReactMarkdown"},a.details)))}function N(e){let{content:t=""}=e;const[a,...n]=t.trim().split(/\n+/),o=n.join("\n");return r.createElement("div",null,r.createElement(S.D,null,a),r.createElement(Z,{title:"View specification",details:o}))}Z.isMDXComponent=!0;const q="heading_REER",I="anchor_oyxB";function j(e){let{name:t,content:a="",interactive:n,request:o,response:i}=e;return["Rewards (by epoch)","Rewards (daily)"].includes(t)&&(o.body={...o.body,start_time:new Date(Date.now()-864e5).toISOString().split("T")[0],end_time:(new Date).toISOString().split("T")[0]}),r.createElement(r.Fragment,null,r.createElement("h2",{id:t.toLowerCase(),className:q,"data-method":o.method},r.createElement("code",null,t),r.createElement("a",{className:I,href:"#"+t.toLowerCase()},"#")),r.createElement(N,{content:a}),r.createElement(C,{req:o,res:i,interactive:n}),r.createElement("hr",null))}function A(e){let{network:t,methods:a}=e;return r.createElement(r.Fragment,null,r.createElement("h3",null,"Available Methods"),a.map(((e,a)=>r.createElement(j,(0,n.Z)({key:t+a},e)))),r.createElement(o.Z,null))}},9407:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>c,toc:()=>m});var n=a(7462),r=(a(7294),a(3905)),o=a(5258),i=a(3976),s=a(2750);const l={title:"Ethereum",sidebar_position:0,pagination_prev:null,pagination_next:null,collapsed:!0,collapsible:!0},d="Rewards API - Ethereum",c={unversionedId:"api-reference/rewards-api/ethereum",id:"api-reference/rewards-api/ethereum",title:"Ethereum",description:'ethereum\\n   chain_id => mainnet\\n   accounts takes in an array of validator\'s public addresses. 50 max.\\n   grouping\\n       epoch will return rewards grouped by epochs.\\n       daily will return rewards grouped by day.\\n   starttime and endtime are ISO 8601 timestamps in UTC.\\n       For daily grouping, we ignore the time component and only care about the YYYY-MM-DD component numeric , exp and currency. The formula to compute the final rewards in the currency unit is numeric  10^-exp(text is the string version of this).\\n    \\n\\n### Limitations\\n\\n   This API serves data for the last 7 days for epoch grouping and 60 days for daily grouping.\\n   This API returns rewards for Figment validators only.\\n   Data is available approximatively an hour after the end of the day or epoch. When requesting daily for the current day, the data will be available but obviously partially complete as the day progresses.\\n    \\n\\n### FAQ\\n\\n#### Reward Types\\n\\nWe index block proposal, attestation, sync committee and slashing rewards.\\n\\n#### Negative Rewards\\n\\nIn theory, there could be a negative rewards amount for a day. But slashing events are rare. Current negative amounts would more likely be caused by repeatedly missing attestations and/or sync committee votes.\\n\\n  ","request"{"type""POST","header""","value""text","disabled"{"network""mainnet","accounts""2022-08-25","endtime""epoch"},"url"//eth-rewards.datahub.figment.io/apikey/9513550c6ba06b65633a2b6ce8c5bb01/rewards"},"interactive"{"name""OK","code"[{"accounts""mainnet","rewards""0.000014843 ETH","currency"14843,"exp""139163","network""0x93257a7d4f1e6998f019483f149a4dbe3bfc8b89358411be769aeedd943de907f178da1773aea9016d1ac2bdfe3794ba","time"03"Rewards (daily)","content" starttime is inclusive and endtime is not. For example, if you wanted to query rewards for only January 1st, 2022, then starttime would be \u201c2022-01-01\u201d and endtime would be \u201c2022-01-02\\"\\n    *   For epoch grouping, if the start of an epoch falls into the requested date range it will be included (even if it doesn\'t end inside the date range).\\n\\n### Response\\n\\n*   network and chainid are the same as the request.\\n   accounts returns an array of account public addresses.\\n   validator returns the validator that tokens were staked to.\\n   time and epoch reference the start of the daily or epoch bucket.\\n   rewards is an array of objects with four components{"auth""noauth"},"method"[{"key""","type"true}],"body""ethereum","chainid"["0x93257a7d4f1e6998f019483f149a4dbe3bfc8b89358411be769aeedd943de907f178da1773aea9016d1ac2bdfe3794ba"],"starttime""2022-07-28","grouping""httpstrue,"response""ETH2 (daily)","status"200,"body"["0x93257a7d4f1e6998f019483f149a4dbe3bfc8b89358411be769aeedd943de907f178da1773aea9016d1ac2bdfe3794ba"],"chainid"[{"text""ETH","numeric"9}],"network""0x93257a7d4f1e6998f019483f149a4dbe3bfc8b89358411be769aeedd943de907f178da1773aea9016d1ac2bdfe3794ba","time"00"Ethereum","value""Solana","value""Polkadot","value":"polkadot"}]} network="ethereum" />',source:"@site/docs/api-reference/rewards-api/ethereum.mdx",sourceDirName:"api-reference/rewards-api",slug:"/api-reference/rewards-api/ethereum",permalink:"/api-reference/rewards-api/ethereum",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Ethereum",sidebar_position:0,pagination_prev:null,pagination_next:null,collapsed:!0,collapsible:!0},sidebar:"docsSidebar"},u={},m=[],p={toc:m};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rewards-api---ethereum"},"Rewards API - Ethereum"),(0,r.kt)(i.Z,{service:"rewards-api",methods:[{name:"Rewards (by epoch)"},{name:"Rewards (daily)"}],networks:[{label:"Ethereum",value:"ethereum"},{label:"Solana",value:"solana"},{label:"Polkadot",value:"polkadot"}],network:"ethereum",mdxType:"ApiReferenceNav"}),(0,r.kt)(s.ZP,{url:"https://eth-rewards.datahub.figment.io/apikey/9513550c6ba06b65633a2b6ce8c5bb01/rewards",mdxType:"MakingCalls"}),(0,r.kt)(o.S,{methods:[{name:"Rewards (by epoch)",content:"Returns gross validator rewards grouped by epoch or day.\n\n### Parameters\n\n*   `network` => `ethereum`\n*   `chain_id` => `mainnet`\n*   `accounts` takes in an array of validator's public addresses. 50 max.\n*   `grouping`\n    *   `epoch` will return rewards grouped by epochs.\n    *   `daily` will return rewards grouped by day.\n*   `start_time` and `end_time` are ISO 8601 timestamps in UTC.\n    *   For daily grouping, we ignore the time component and only care about the YYYY-MM-DD component: `start_time` is inclusive and `end_time` is not. For example, if you wanted to query rewards for only January 1st, 2022, then `start_time` would be \u201c2022-01-01\u201d and `end_time` would be \u201c2022-01-02\".\n    *   For epoch grouping, if the start of an epoch falls into the requested date range it will be included (even if it doesn't end inside the date range).\n\n### Response\n\n*   `network` and `chain_id` are the same as the request.\n*   `accounts` returns an array of account public addresses.\n*   `validator` returns the validator that tokens were staked to.\n*   `time` and `epoch` reference the start of the daily or epoch bucket.\n*   `rewards` is an array of objects with four components: `numeric` , `exp` and `currency`. The formula to compute the final rewards in the `currency` unit is `numeric * 10^-exp`(`text` is the string version of this).\n    \n\n### Limitations\n\n*   This API serves data for the last 7 days for epoch grouping and 60 days for daily grouping.\n*   This API returns rewards for Figment validators only.\n*   Data is available approximatively an hour after the end of the day or epoch. When requesting daily for the current day, the data will be available but obviously partially complete as the day progresses.\n    \n\n### FAQ\n\n#### Reward Types\n\nWe index block proposal, attestation, sync committee and slashing rewards.\n\n#### Negative Rewards\n\nIn theory, there could be a negative rewards amount for a day. But slashing events are rare. Current negative amounts would more likely be caused by repeatedly missing attestations and/or sync committee votes.\n\n* * *",request:{auth:{type:"noauth"},method:"POST",header:[{key:"",value:"",type:"text",disabled:!0}],body:{network:"ethereum",chain_id:"mainnet",accounts:["0x93257a7d4f1e6998f019483f149a4dbe3bfc8b89358411be769aeedd943de907f178da1773aea9016d1ac2bdfe3794ba"],start_time:"2022-08-25",end_time:"2022-08-26",grouping:"epoch"},url:"https://eth-rewards.datahub.figment.io/apikey/9513550c6ba06b65633a2b6ce8c5bb01/rewards"},interactive:!0,response:{name:"ETH3 (epoch)",status:"OK",code:200,body:[{accounts:["0x93257a7d4f1e6998f019483f149a4dbe3bfc8b89358411be769aeedd943de907f178da1773aea9016d1ac2bdfe3794ba"],chain_id:"mainnet",rewards:[{text:"0.000014843 ETH",currency:"ETH",numeric:14843,exp:9}],epoch:"139163",network:"ethereum",validator:"0x93257a7d4f1e6998f019483f149a4dbe3bfc8b89358411be769aeedd943de907f178da1773aea9016d1ac2bdfe3794ba",time:"2022-08-12T00:03:12Z"}]}},{name:"Rewards (daily)",content:"Returns gross validator rewards grouped by epoch or day.\n\n### Parameters\n\n*   `network` => `ethereum`\n*   `chain_id` => `mainnet`\n*   `accounts` takes in an array of validator's public addresses. 50 max.\n*   `grouping`\n    *   `epoch` will return rewards grouped by epochs.\n    *   `daily` will return rewards grouped by day.\n*   `start_time` and `end_time` are ISO 8601 timestamps in UTC.\n    *   For daily grouping, we ignore the time component and only care about the YYYY-MM-DD component: `start_time` is inclusive and `end_time` is not. For example, if you wanted to query rewards for only January 1st, 2022, then `start_time` would be \u201c2022-01-01\u201d and `end_time` would be \u201c2022-01-02\"\n    *   For epoch grouping, if the start of an epoch falls into the requested date range it will be included (even if it doesn't end inside the date range).\n\n### Response\n\n*   `network` and `chain_id` are the same as the request.\n*   `accounts` returns an array of account public addresses.\n*   `validator` returns the validator that tokens were staked to.\n*   `time` and `epoch` reference the start of the daily or epoch bucket.\n*   `rewards` is an array of objects with four components: `numeric` , `exp` and `currency`. The formula to compute the final rewards in the `currency` unit is `numeric * 10^-exp`(`text` is the string version of this).\n    \n\n### Limitations\n\n*   This API serves data for the last 7 days for epoch grouping and 60 days for daily grouping.\n*   This API returns rewards for Figment validators only.\n*   Data is available approximatively an hour after the end of the day or epoch. When requesting daily for the current day, the data will be available but obviously partially complete as the day progresses.\n    \n\n### FAQ\n\n#### Reward Types\n\nWe index block proposal, attestation, sync committee and slashing rewards.\n\n#### Negative Rewards\n\nIn theory, there could be a negative rewards amount for a day. But slashing events are rare. Current negative amounts would more likely be caused by repeatedly missing attestations and/or sync committee votes.\n\n* * *",request:{auth:{type:"noauth"},method:"POST",header:[{key:"",value:"",type:"text",disabled:!0}],body:{network:"ethereum",chain_id:"mainnet",accounts:["0x93257a7d4f1e6998f019483f149a4dbe3bfc8b89358411be769aeedd943de907f178da1773aea9016d1ac2bdfe3794ba"],start_time:"2022-07-27",end_time:"2022-07-28",grouping:"daily"},url:"https://eth-rewards.datahub.figment.io/apikey/9513550c6ba06b65633a2b6ce8c5bb01/rewards"},interactive:!0,response:{name:"ETH2 (daily)",status:"OK",code:200,body:[{accounts:["0x93257a7d4f1e6998f019483f149a4dbe3bfc8b89358411be769aeedd943de907f178da1773aea9016d1ac2bdfe3794ba"],chain_id:"mainnet",rewards:[{text:"0.003292558 ETH",currency:"ETH",numeric:3292558,exp:9}],network:"ethereum",validator:"0x93257a7d4f1e6998f019483f149a4dbe3bfc8b89358411be769aeedd943de907f178da1773aea9016d1ac2bdfe3794ba",time:"2022-07-21T00:00:00Z"}]}}],service:"rewards-api",networks:[{label:"Ethereum",value:"ethereum"},{label:"Solana",value:"solana"},{label:"Polkadot",value:"polkadot"}],network:"ethereum",mdxType:"APIMethods"}))}h.isMDXComponent=!0}}]);