"use strict";(self.webpackChunkfigment_documentation=self.webpackChunkfigment_documentation||[]).push([[3133],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=i,g=c["".concat(p,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3967:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={title:"Submit Withdrawl Transaction Data"},o=void 0,l={unversionedId:"guides/staking-api/Solana/undelegate/submit-withdrawl-transaction-data",id:"guides/staking-api/Solana/undelegate/submit-withdrawl-transaction-data",title:"Submit Withdrawl Transaction Data",description:"After receiving the deactivation webhook, a query to GET /api/v1/flows/[",source:"@site/docs/guides/staking-api/Solana/undelegate/5_submit-withdrawl-transaction-data.mdx",sourceDirName:"guides/staking-api/Solana/undelegate",slug:"/guides/staking-api/Solana/undelegate/submit-withdrawl-transaction-data",permalink:"/guides/staking-api/Solana/undelegate/submit-withdrawl-transaction-data",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Submit Withdrawl Transaction Data"},sidebar:"docsSidebar",previous:{title:"Submit a Signed Transaction for Broadcast",permalink:"/guides/staking-api/Solana/undelegate/submit-signed-transaction"},next:{title:"Sign the Delegate Transaction",permalink:"/guides/staking-api/Solana/undelegate/sign-undelegate-transaction"}},p={},s=[],d={toc:s};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"After receiving the deactivation webhook, a query to ",(0,i.kt)("inlineCode",{parentName:"p"},"GET /api/v1/flows/[:flow_id]/next")," will return the following response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "[:id]",\n  "state": "deactivated",\n  "actions": [\n    {\n      "name": "create_withdraw_tx",\n      "inputs": [\n        {\n          "name": "amount",\n          "description": "",\n          "type": "decimal",\n          "validations": [\n            {\n              "type": "presence",\n              "options": {}\n            },\n            {\n              "type": "numericality",\n              "options": {\n                "greater_than": 0\n              }\n            }\n          ]\n        },\n        {\n          "name": "funding_account_pubkey",\n          "description": "",\n          "type": "string",\n          "validations": []\n        },\n        {\n          "name": "recipient_pubkey",\n          "description": "",\n          "type": "string",\n          "validations": [\n            {\n              "type": "presence",\n              "options": {}\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  "data": {},\n  "network_code": "solana",\n  "chain_code": "devnet",\n  "created_at": "[:date_time]",\n  "updated_at": "[:date_time]"\n}\n')),(0,i.kt)("p",null,"We see there is one Action \u2014 ",(0,i.kt)("inlineCode",{parentName:"p"},"create_withdraw_tx")," \u2014 and three required fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount")," (",(0,i.kt)("strong",{parentName:"li"},"required"),") \u2014 the number of SOL to be withdrawn. Partial withdrawal is possible."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"funding_account_pubkey")," (",(0,i.kt)("strong",{parentName:"li"},"required"),") \u2014 The address of the account that will pay the transaction fee."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"recipient_pubkey")," (",(0,i.kt)("strong",{parentName:"li"},"required"),") \u2014 The address of the wallet to which the withdrawn SOL will be sent.")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("strong",{parentName:"p"},"IMPORTANT"),": Note that the recipient of the withdrawal is ",(0,i.kt)("em",{parentName:"p"},"not")," the originating address by default!")),(0,i.kt)("p",null,"Once this data has been collected we submit it to the Staking API with ",(0,i.kt)("inlineCode",{parentName:"p"},"PUT /api/v1/flows/[:flow_id]/next")," and the following ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," JSON:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "amount": "[:amount]",\n  "funding_account_pubkey": "[:funding_account_pubkey]",\n  "recipient_pubkey": "[:recipient_pubkey]"\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'curl -X PUT https://slate-staging.figment.io/api/v1/flows/[:flow_id]/next \\\n-H "Authorization: API-KEY" \\\n-H "Content-Type: application/json" \\\n-d \'{\n  "name": "create_withdraw_tx",\n  "inputs": {\n    "amount": "[:amount]",\n    "funding_account_pubkey": "[:funding_account_pubkey]",\n    "recipient_pubkey": "[:recipient_pubkey]"\n  }\n}\'\n')),(0,i.kt)("p",null,"Note that, in this response, you can find the unsigned, serialized transaction in ",(0,i.kt)("inlineCode",{parentName:"p"},"data[create_withdraw_transaction][raw]"),"."),(0,i.kt)("p",null,"There are two possible ",(0,i.kt)("inlineCode",{parentName:"p"},"actions"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refresh_withdraw_tx")," \u2014 If you need to get a fresh version of the transaction Payload (i.e., the recent blockhash has expired)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sign_withdraw_tx")," \u2014 Submit a signed transaction payload ready to be broadcast to the network.")),(0,i.kt)("p",null,"We will choose ",(0,i.kt)("inlineCode",{parentName:"p"},"sign_withdraw_tx"),", which indicates one Input to collect:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transaction_payload")," (",(0,i.kt)("strong",{parentName:"li"},"required"),") \u2014 The signed transaction Payload ready to be broadcast to the network.")))}u.isMDXComponent=!0}}]);